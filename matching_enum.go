// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package main

import (
	"errors"
	"fmt"
)

const (
	// MatcherEnumEqual is a matcherEnum of type Equal.
	MatcherEnumEqual matcherEnum = iota
	// MatcherEnumPrefix is a matcherEnum of type Prefix.
	MatcherEnumPrefix
	// MatcherEnumSuffix is a matcherEnum of type Suffix.
	MatcherEnumSuffix
)

var ErrInvalidmatcherEnum = errors.New("not a valid matcherEnum")

const _matcherEnumName = "equalprefixsuffix"

var _matcherEnumMap = map[matcherEnum]string{
	MatcherEnumEqual:  _matcherEnumName[0:5],
	MatcherEnumPrefix: _matcherEnumName[5:11],
	MatcherEnumSuffix: _matcherEnumName[11:17],
}

// String implements the Stringer interface.
func (x matcherEnum) String() string {
	if str, ok := _matcherEnumMap[x]; ok {
		return str
	}
	return fmt.Sprintf("matcherEnum(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x matcherEnum) IsValid() bool {
	_, ok := _matcherEnumMap[x]
	return ok
}

var _matcherEnumValue = map[string]matcherEnum{
	_matcherEnumName[0:5]:   MatcherEnumEqual,
	_matcherEnumName[5:11]:  MatcherEnumPrefix,
	_matcherEnumName[11:17]: MatcherEnumSuffix,
}

// ParsematcherEnum attempts to convert a string to a matcherEnum.
func ParsematcherEnum(name string) (matcherEnum, error) {
	if x, ok := _matcherEnumValue[name]; ok {
		return x, nil
	}
	return matcherEnum(0), fmt.Errorf("%s is %w", name, ErrInvalidmatcherEnum)
}

// MarshalText implements the text marshaller method.
func (x matcherEnum) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *matcherEnum) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParsematcherEnum(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

// Returns the MatcherOption associated with me and true. If me is not a valid matcherEnum, false is returned
func (me matcherEnum) toMatcher() (MatcherOption, bool) {
	switch me {
	case MatcherEnumEqual:
		return WithEqualMatcher(), true
	case MatcherEnumPrefix:
		return WithPrefixMatcher(), true
	case MatcherEnumSuffix:
		return WithSuffixMatcher(), true
	default:
		return nil, false
	}
}
